import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';

const initialState = {
  value:0,
  //demo
  items: [],
  sales: [],
  numOfItemsInStore:0,
  numOfAllItems:0,
  sumOfSales:0,

  status: 'idle',
};

// iten:{
//   name:"",
//   price:1
// }


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'inventory',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addItem: (state, action) => {
      // console.log(action.payload);
      const index = state.items.findIndex(i => i.name == action.payload.name);
      if(index === -1){
        state.items.push(action.payload);
        state.numOfItemsInStore += 1
        state.numOfAllItems += 1
      }else{
        console.log("item already in the store");
      }
    },

    changingPriceByName: (state, action) => {
    const index = state.items.findIndex(i => i.name == action.payload.name);
    if(index === -1){
      console.log("item not in the store");
    
    }else{
      state.items = [...state.items.filter((i) => i.name !== action.payload.name)]
      state.items.push(action.payload);

    }
    
      // state.items = [...state.items.map((i) =>{
      //   if( i.name === action.payload.name){
      //     i.price = action.payload.price
      //   }
      // })];
    },

    sellItem: (state, action) => {
      state.sales.push(action.payload);
      state.items = [...state.items.filter((i) => i.name !== action.payload.name)]
      state.numOfItemsInStore -= 1
      state.sumOfSales += action.payload.price
    },

    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const { increment, decrement, incrementByAmount,addItem,sellItem,changingPriceByName } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.inventory.value;
export const selectItems = (state) => state.inventory.items;
export const selectSalesItems = (state) => state.inventory.sales;
export const numOfItemsInStore = (state) => state.inventory.numOfItemsInStore
export const numOfAllItems = (state) => state.inventory.numOfAllItems
export const sumOfSales = (state) => state.inventory.sumOfSales



// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
